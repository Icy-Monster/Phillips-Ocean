--!native
--!optimize 2

-- If anyone wants to optimize this more I recommend moving these 2 modules over from using tables to vector2s.
-- Also be aware that this is aggressively optimized and will not function with a different use case
--https://github.com/h4rm/luafft

--[[
This package provides functions to carry out Fast Fourier Transformations.

Copyright (C) 2011 by Benjamin von Ardenne

MIT LICENSE

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

]]

local complex = require(script.Parent.Complex)

---------------------------------------------------------------
--This is a lua port of the KissFFT Library by Mark Borgerding
--It provides a simple function to carry out a fast fourier transformation (FFT).
local luafft = {}

---------------------------------------------------------------
-- Short helper function that provides an easy way to print a list with values.
---------------------------------------------------------------
local function print_list(list)
	for i,v in list do print(i,v) end
end

---------------------------------------------------------------
---devides a number into a sequence of factors
--
--@param num_points	Number of points that are used.
--
--@return		Returns a list with the factors
---------------------------------------------------------------
local function calculate_factors(num_points)
	local buf = table.create(14)
	local p = 4
	local floor_sqrt = math.floor( math.sqrt( num_points) )
	local n = num_points

	repeat
		while n%p > 0 do
			if 		p == 4 then p = 2
			elseif 	p == 2 then p = 3
			else 	p = p + 2 end

			if p > floor_sqrt then p = n; break end
		end

		n = n / p
		table.insert(buf, p)
		table.insert(buf, n)
	until n <= 1

	return buf
end

---------------------------------------------------------------
--Carries out a butterfly 2 run of the input sample.
---------------------------------------------------------------
local function butterfly2(input,out_index,fstride, twiddles, m)
	local i1 = out_index
	local i2 = out_index + m
	local ti = 1

	for _ = m, 0, -1 do
		local t = complex.mul(input[i2], twiddles[ti])
		ti = ti + fstride
		input[i2] = complex.sub(input[i1], t)
		input[i1] = complex.add(input[i1], t)
		i1 = i1 + 1
		i2 = i2 + 1
	end
end

---------------------------------------------------------------
--Carries out a butterfly 4 run of the input sample. ------------------------- main source of lag
---------------------------------------------------------------
local function butterfly4(input,i, fstride, twiddles, m)
	local ti1, ti2, ti3 = 1,1,1
	local scratch = table.create(6, table.create(2))
	--// Pre-Calculate the values
	local m2 = 2*m
	local m3 = 3*m

	local fstride2 = fstride*2
	local fstride3 = fstride*3

	for j = i, i+m-1 do
		scratch[1] = complex.mul(input[j+m], twiddles[ti1])
		scratch[2] = complex.mul(input[j+m2], twiddles[ti2])
		scratch[3] = complex.mul(input[j+m3], twiddles[ti3])

		scratch[6] = complex.sub(input[j], scratch[2])
		input[j] = complex.add(input[j], scratch[2])

		scratch[4] = complex.add(scratch[1], scratch[3])
		scratch[5] = complex.sub(scratch[1], scratch[3])

		input[j+m2] = complex.sub(input[j], scratch[4])
		ti1 = ti1 + fstride
		ti2 = ti2 + fstride2
		ti3 = ti3 + fstride3
		input[j] = complex.add(input[j], scratch[4])

		input[j+m][1] = scratch[6][1] - scratch[5][2]
		input[j+m][2] = scratch[6][2] + scratch[5][1]

		input[j+m3][1] = scratch[6][1] + scratch[5][2]
		input[j+m3][2] = scratch[6][2] - scratch[5][1]
	end

end

---------------------------------------------------------------
--Carries out a butterfly 3 run of the input sample.
---------------------------------------------------------------
local function butterfly3(input,out_index, fstride, twiddles, m)
	local m2 = m*2
	local tw1, tw2 = 1,1
	local scratch = table.create(4, table.create(2))
	local epi3 = twiddles[fstride*m][2]

	for j = out_index, out_index+m-1 do
		scratch[2] = complex.mul(input[j+m], twiddles[tw1])
		scratch[3] = complex.mul(input[j+m2], twiddles[tw2])
		scratch[4] = complex.add(scratch[2], scratch[3])
		scratch[1] = complex.sub(scratch[2], scratch[3])
		tw1 = tw1 + fstride
		tw2 = tw2 + fstride*2

		input[j+m][1] = input[j][1] - scratch[4][1]*0.5
		input[j+m][2] = input[j][2] - scratch[4][2]*0.5
		
		scratch[1] = complex.mulnum(scratch[1], epi3)
		input[j] = complex.add(input[j], scratch[4])

		input[j+m2][1] = input[j+m][1] + scratch[1][2]
		input[j+m2][2] = input[j+m][2] - scratch[1][1]

		input[j+m][1] = input[j+m][1] - scratch[1][2]
		input[j+m][2] = input[j+m][2] + scratch[1][1]
	end

end

---------------------------------------------------------------
--Carries out a butterfly 5 run of the input sample.
---------------------------------------------------------------
local function butterfly5(input,out_index, fstride, twiddles, m)
	local i0,i1,i2,i3,i4 = out_index,out_index+m,out_index+2*m,out_index+3*m,out_index+4*m
	local scratch = {}
	local tw = twiddles
	local ya,yb = tw[1+fstride*m],tw[1+fstride*2*m]
	for u = 0,m-1 do
		scratch[0] = input[i0]

		scratch[1] = complex.mul(input[i1], tw[1+u*fstride])
		scratch[2] = complex.mul(input[i2], tw[1+2*u*fstride])
		scratch[3] = complex.mul(input[i3], tw[1+3*u*fstride])
		scratch[4] = complex.mul(input[i4], tw[1+4*u*fstride])

		scratch[7] = complex.add(scratch[1], scratch[4])
		scratch[8] = complex.add(scratch[2], scratch[3])
		scratch[9] = complex.sub(scratch[2], scratch[3])
		scratch[10] = complex.sub(scratch[1], scratch[4])

		input[i0][1] = input[i0][1] + scratch[7][1] + scratch[8][1]
		input[i0][2] = input[i0][2] + scratch[7][2] + scratch[8][2]

		scratch[5] = 	{scratch[0][1] + scratch[7][1]*ya[1] + scratch[8][1]*yb[1],
			scratch[0][2] + scratch[7][2]*ya[1] + scratch[8][2]*yb[1]}

		scratch[6]	=	{scratch[10][2]*ya[2] + scratch[9][2]*yb[2],
			-1* scratch[10][1]*ya[2] + scratch[9][1]*yb[2]}

		input[i1] = complex.sub(scratch[5], scratch[6])
		input[i4] = complex.add(scratch[5], scratch[6])

		scratch[11] =	{scratch[0][1] + scratch[7][1]*yb[1] + scratch[8][1]*ya[1],
			scratch[0][2] + scratch[7][2]*yb[1] + scratch[8][2]*ya[1]}

		scratch[12] =	{-1* scratch[10][2]*yb[2] + scratch[9][2]*ya[2],
			scratch[10][1]*yb[2] - scratch[9][1]*ya[2]}

		input[i2] = complex.add(scratch[11], scratch[12])
		input[i3] = complex.sub(scratch[11], scratch[12])

		i0=i0+1
		i1=i1+1
		i2=i2+1
		i3=i3+1
		i4=i4+1
		
		

	end

end

---------------------------------------------------------------
--The essential work function that performs the FFT
---------------------------------------------------------------
local function work(input, output, out_index, f, factors, factors_index, twiddles, fstride, in_stride, inverse)
	local p = factors[factors_index]
	local m = factors[factors_index+1]
	factors_index = factors_index + 2
	local last = out_index + p*m
	local stride = fstride*in_stride

	if m == 1 then
		for i = out_index, last-1 do  
			output[i] = input[f]
			f = f + stride
		end
	else
		for i = out_index, last-1, m  do
			work(input, output,i,  f, factors, factors_index, twiddles, fstride*p, in_stride, inverse)
			f = f + stride
		end
	end

	-- aggressively optimized for this use case
	if p == 3 then 	butterfly3(output,out_index, fstride, twiddles, m)
	else			butterfly4(output,out_index, fstride, twiddles, m) end
end

---------------------------------------------------------------
--Calculates the Fast Fourier Transformation of the given input
--
--@param input		A set of points that will be transformed.
--					At this point, the input has to be a list of complex numbers,
--					according to the format in complex.lua.
--@param inverse	Boolean that controls whether a transformation
--					or inverse transformation will be carried out.
--@return			Returns a list of complex numbers with the same size
--					as the input list. Contains the fourier transformation of the input.
---------------------------------------------------------------
function luafft.iFFT(input)
	--the size of input defines the number of total points
	local num_points = #input

	local twiddles = table.create(num_points)
	local ph =  6.283185307179586 / num_points
	
	for i = 0,num_points-1 do
		local phase = ph * i -- -2 * math.pi * i / num_points
		table.insert(twiddles, {math.cos(phase), math.sin(phase)} )
	end

	local factors = calculate_factors(num_points)
	local output = table.create(num_points)
	work(input, output, 1, 1, factors,1, twiddles, 1, 1)

	return output
end


return luafft
